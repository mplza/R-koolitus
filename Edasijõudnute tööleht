# EDASIJÕUDNUTE TÖÖLEHT


# Pakettide laadimine
#install.packages('tidyverse') # installi vajadusel
library(tidyverse) # lae töölauale


# Gapminderi andmestiku laadimine töölauale ja uuel vahelehel avamine
library(readxl)
gapminder <- read_excel("gapminder.xlsx")
View(gapminder)


# Andmetega tutvumine
head(gapminder)
summary(gapminder)

gapminder %>%
  mutate_if(is.character, as.factor) %>% # muuda sõned faktoriteks
  summary()


# TOIMINGUD VEERGUDEGA

# Nimetamine veerud ümber: eestikeelsed pealkirjad
gapminder_ee <- gapminder %>%
  rename(Riik = 'country',
         Kontinent = 'continent',
         Aasta = 'year',
         Oodatav_eluiga = 'lifeExp',
         Rahvaarv = 'pop',
         SKP = 'gdpPercap')
gapminder_ee

# Veergude liitmine
gapminder_unite <- gapminder_ee %>%
  unite(Kontinent_Aasta, c('Kontinent', 'Aasta'), sep = '_')
gapminder_unite

# Veergude lahutamine
gapminder_separate <- gapminder_unite %>%
  separate(Kontinent_Aasta, c('Kontinent', 'Aasta'), sep = '_')
gapminder_separate


# PUUDUVAD ANDMED

# Loome näidisandmestiku, kus on puuduvaid andmeid
kommid <- tibble(
  toode = c('Karakum', 'Oravake', 'Tiina', 'Lily', 'Kaseke', 'Mesikäpp batoonike', 'Barbarissimaitseline karamell'),
  kategooria = c('Pralineekommid', 'Pralineekommid', 'Marmelaadikommid', NA, 'Batoonikesed', 'Batoonikesed', 'Karamellid'),
  myydud_yhikud = c(NA, 56, 93, 26, NA, 43, 82),
  kaal_grammides = c(175, 175, 175, NA, 150, NA, 120),
  hind = c(2.59, NA, 2.19, NA, 1.89, 1.89, 0.79)
  )
kommid

# Kas nii saab arvutada?
mean(kommid$kaal_grammides)
mean(kommid$kaal_grammides, na.rm = TRUE)

# Puuduvate andmete leidmine
kommid %>%
  mutate_if(is.character, as.factor) %>% # muuda sõned faktoriteks
  summary()

kommid %>%
  filter(is.na(kategooria))

# Puuduvate andmete eemaldamine: kõik read
kommid %>%
  drop_na() 

# Puuduvate andmete eemaldamine: üks veerg
kommid %>%
  filter(!is.na(kategooria)) 


# Puuduvate andmete asendamine

# Asenda veeru kõik puuduvad väärtused uue väärtusega
kommid1 <- kommid %>%
  mutate(kategooria = replace_na(kategooria, 'Marmelaadikommid'))
kommid1

# Asenda veeru kõik puuduvad andmed nullidega
kommid2 <- kommid1 %>%
  mutate(myydud_yhikud = replace_na(myydud_yhikud, 0))
kommid2

# Andmete tuletamine
# Asenda veeru kõik puuduvad väärtused grupi keskmisega
kommid2 %>%
  #group_by(kategooria) %>% # iga grupi kohta
  mutate(kaal_grammides1 = replace_na(kaal_grammides, mean(kaal_grammides, na.rm = TRUE)))

# Asenda puuduvad andmed eelmise teadaolevaga
kommid2 %>%
  fill(kaal_grammides, .direction = 'down')

# Asenda puuduvad andmed järgmise teadaolevaga
kommid2 %>%
  fill(kaal_grammides, .direction = 'up')

#Kuidas asendaksite puuduvad andmed hinna veerus?
kommid3 %>%
  ...


# Andmete asendamine tingimuste alusel

# Kui kategooria on Marmelaadikommid, olgu kaal_grammides 175
# Kui kategooria on Batoonikesed, olgu kaal_grammides 150
# Muul juhul kaal_grammides algne väärtus
kommid2 %>%
  mutate(kaal_grammides1 = case_when(
    kategooria == 'Marmelaadikommid' ~ 175,
    kategooria == 'Batoonikesed' ~ 150,
    TRUE ~ kaal_grammides)
  )


# ANDMESTIKU KUJU MUUTMINE

table1 # lai
table2 # pikk
table3 # ??
table4a
table4b

# Ülesanne: Milline/millised nendest näidetest on korrastatud, milline/millised mitte?
  
# Pikast laiaks
table2 %>%
  pivot_wider(names_from = 'type', values_from = 'count')

# Laiast pikaks
table1 %>%
  pivot_longer(c('cases', 'population'), names_to = 'type', values_to = 'count')

# Ülesanne: Kuidas viia table3, table4a ja table4b korrastatud kujule?
  
# table3
table3_tidy <- table3 %>%
  separate(rate, c('cases', 'population'), sep = '/')
table3_tidy

# table4a: viime pikale kujule ja salvestame uueks andmestikuks table4a_tidy
table4a_tidy <- table4a %>%
  pivot_longer(c('1999', '2000'), names_to = 'year', values_to = 'cases')
table4a_tidy

# table4b: viime pikale kujule ja salvestame uueks andmestikuks table4b_tidy
table4b_tidy <- table4b %>%
  pivot_longer(c('1999', '2000'), names_to = 'year', values_to = 'population')
table4b_tidy


# DPLYR EDASIJÕUDNUTELE

# Andmestike kombineerimine

# Näidisandmestike loomine
kontoritooted <- tibble(Tootekood = c(5, 10, 15, 20), 
                        Toote_nimi = c('Kaustik', 'Pastakas', 'Kalkulaator', 'Marker'),
                        Suurus = c('Suur', 'Väike', 'Keskmine', 'Mega')) 

pagaritooted <- tibble(Tootekood = c(25, 30, 35, 40), 
                       Toote_nimi = c('Vormileib', 'Sai', 'Sepik', 'Seemneleib'), 
                       Suurus = c('Mega', 'Väike', 'Keskmine', 'Suur')) 

hinnad <- tibble(Tootekood = c(10, 15, 20, 25), 
                 Hind = c(3, 2, 10, 5), 
                 Valuuta = c('euro', 'euro', 'euro', 'euro'))

kontoritooted 
pagaritooted 
hinnad


# Bind meetodid

# Kaks tabelit horisontaalselt kokku 
bind_rows(kontoritooted, pagaritooted) 

# Kaks tabelit vertikaalselt kokku 
bind_cols(kontoritooted, hinnad)

# Milline probleem siin tekib?
  

# Join meetodid
  
# left_join() 
kõik_tooted <- left_join(kontoritooted, hinnad, by = 'Tootekood') 
kõik_tooted

# right_join() 
right_join(kontoritooted, hinnad, by = 'Tootekood') 

# inner_join() 
inner_join(kontoritooted, hinnad, by = 'Tootekood') 

# full_join() 
full_join(kontoritooted, hinnad, by = 'Tootekood')

# Ülesanne: Kuidas ühendada omavahel andmestikud table4a_tidy ja table4b_tidy?
left_join(table4a_tidy, table4b_tidy, by = c('country', 'year'))


# Vektoriseeritud funktsioonid


# lag()

# Argentina rahvaarv eelmisel vaatlusaastal
gapminder_ee %>%
  filter(Riik == 'Argentina') %>%
  select(Riik, Aasta, Rahvaarv) %>%
  mutate(Rahvaarv_eelmisel_aastal = lag(Rahvaarv, 1))

# Argentina rahvaarvu muutus vaatlusaastatel
gapminder_ee %>%
  filter(Riik == 'Argentina') %>%
  select(Riik, Aasta, Rahvaarv) %>%
  mutate(Rahvaarv_eelmisel_aastal = lag(Rahvaarv, 1),
         Rahvaarvu_muutus = Rahvaarv - Rahvaarv_eelmisel_aastal,
         Muutus_protsentides = Rahvaarvu_muutus / Rahvaarv_eelmisel_aastal * 100)


# lead()

# Soome SKP järgmisel vaatlusaastal
gapminder_ee %>%
  filter(Riik == 'Finland') %>%
  select(Riik, Aasta, SKP) %>%
  mutate(SKP_järgneval_aastal = lead(SKP, 1))


# cummin(), cummax(), cummean(), cumsum()

# Kumulatiivne kõige madalam ja kõige kõrgem oodatav eluiga
gapminder_ee %>%
  filter(Kontinent == 'Oceania') %>%
  select(Aasta, Riik, Oodatav_eluiga) %>%
  arrange(Aasta) %>%
  #group_by(Aasta) %>%
  mutate(Kum_madalaim_eluiga = cummin(Oodatav_eluiga),
         Kum_kõrgeim_eluiga = cummax(Oodatav_eluiga))

# Kanada kumulatiivne keskmine oodatav eluiga
gapminder_ee %>%
  filter(Riik == 'Canada') %>%
  mutate(Kum_keskmine_eluiga = cummean(Oodatav_eluiga)) 

# Egiptuse kumulatiivne SKP summa
gapminder_ee %>%
  filter(Riik == 'Egypt') %>%
  mutate(Kum_SKP_summa = cumsum(SKP)) 


# row_number()

# Rea numbrite lisamine
gapminder_ee %>%
  mutate(Rea_nr = row_number())


# dense_rank()

# Reastamine mingi väärtuse alusel, vaikimisi tõusvas järjekorras
# Langeva järjekorra jaoks: dense_rank(-Rahvaarv)
gapminder_ee %>%
  mutate(Rank = dense_rank(Rahvaarv)) %>% 
  arrange(Rank)


# ntile()

# Väärtused jagatakse teatud arvu rühmadesse sarnaselt histogrammile
# Nt 10 (detsiilid), 4 (kvartiilid)
gapminder_ee %>%
  select(Aasta, Riik, SKP) %>%
  filter(Aasta == 2007) %>%
  mutate(Detsiil = ntile(SKP, 10)) %>%
  arrange(-Detsiil)

# Detsiilide statistika 
gapminder_ee %>%
  select(Aasta, Riik, SKP) %>%
  filter(Aasta == 2007) %>%
  mutate(Detsiil = ntile(SKP, 10)) %>%
  group_by(Detsiil) %>%
  summarize(keskmine_SKP = mean(SKP),
            riikide_arv = n_distinct(Riik))


# percent_rank()

# SKP on kõrgem/madalam kui n% kõikidest teistest
gapminder_ee %>%
  select(Aasta, Riik, SKP) %>%
  filter(Aasta == 2007) %>%
  mutate(Protsentiil = percent_rank(SKP)) %>%
  arrange(-Protsentiil)


# Summaarsed funktsioonid


# n(), n_distinct()

# Vaatluste ja riikide arv andmestikus
gapminder_ee %>%
  summarize(Vaatluste_arv = n(),
            Riikide_arv = n_distinct(Riik))


# sum(), mean(), median(), min(), max()

# Saksamaa kokkuvõtlik statistika
gapminder_ee %>%
  filter(Riik == 'Germany') %>%
  summarize(SKP_kogusumma = sum(SKP),
            Oodatav_eluiga_keskm = mean(Oodatav_eluiga),
            Oodatav_eluiga_med = median(Oodatav_eluiga),
            Rahvaarv_min = min(Rahvaarv),
            Rahvaarv_max = max(Rahvaarv))


# first(), last()

# Kõige kõrgema ja madalama rahvaarvuga riik 2007. aastal
gapminder_ee %>%
  filter(Aasta == 2007) %>%
  arrange(-Rahvaarv) %>% # langevas järjekorras
  summarize(Kõrgeim_rahvaarv = first(Riik),
            Madalaim_rahvaarv = last(Riik))


# nth()

# Millised riigid on mitmendal kohal SKP järgi
gapminder_ee %>%
  filter(Aasta == 2007,
         Kontinent == 'Europe') %>%
  arrange(-SKP) %>%
  summarize(Esimene = nth(Riik, 1),
            Kolmas = nth(Riik, 3),
            Viies = nth(Riik, 5),
            Kümnes = nth(Riik, 10))



# TEKSTILISTE ANDMETE TÖÖTLEMINE

# Andmestiku 10 esimest riiki
riigid <- gapminder_ee %>%
  select(Riik, Kontinent) %>%
  distinct() %>%
  tail(10)
riigid


# str_to_lower()

# Kõik väiketähed
riigid %>%
  mutate(Riik3 = str_to_lower(Riik))


# str_to_upper()

# Kõik suured tähed
riigid %>%
  mutate(Riik3 = str_to_upper(Riik))


# str_to_title()

# Iga sõna suure algustähega
riigid %>%
  mutate(Riik3 = str_to_title(Riik))


# str_detect()

# Leia riigid, mille nimi sisaldab i-tähte
riigid %>%
  mutate(i_täht = str_detect(Riik, 'i'))


# str_replace(), str_replace_all()

# Milline on nende kahe funktsiooni erinevus?
riigid %>%
  mutate(Riik1 = str_replace(Riik, 'e', 'E'),
         Riik2 = str_replace_all(Riik, 'e', 'E'))

# Ülesanne: Asendage riikige nimed selliselt, et sõna "United" asemel on midagi muud.
  
riigid %>%
  mutate(Riik_uus = str_replace(Riik, ..., ...))


# Ülesanne: Leidke gapminder_ee andmestikust kõik riigid, mille nimes sisaldub "land"
gapminder_ee %>%
  filter(str_detect(Riik, 'land')) %>%
  select(Riik) %>%
  distinct()
