# EDASIJÕUDNUTE TÖÖLEHT



# TIDYVERSE
#install.packages('tidyverse') # installi vajadusel
library(tidyverse) # lae töölauale



# KOOLITUSPÄEVA ANDMESTIK

# Gapminderi andmestiku laadimine töölauale ja uuel vahelehel avamine
library(readxl)
gapminder <- read_excel("gapminder.xlsx")
View(gapminder)

# Andmestikuga tutvumine
head(gapminder)
summary(gapminder)
glimpse(gapminder)

gapminder %>%
  mutate_if(is.character, as.factor) %>% # muuda sõned faktoriteks
  summary()



# TOIMINGUD VEERGUDEGA


## Veergude ümbernimetamine

# Nimetamine veerud ümber: eestikeelsed pealkirjad
gapminder_ee <- gapminder %>%
  rename(Riik = 'country',
         Kontinent = 'continent',
         Aasta = 'year',
         Oodatav_eluiga = 'lifeExp',
         Rahvaarv = 'pop',
         SKP = 'gdpPercap')

# Vaatame tulemust
gapminder_ee


## Veergude liitmine ja lahutamine

# Ühendame kontinendi ja aasta veerud üheks veeruks
gapminder_unite <- gapminder_ee %>%
  unite(Kontinent_Aasta, c('Kontinent', 'Aasta'), sep = '_')

gapminder_unite

# Eraldame Kontinent_Aasta veerud kaheks eraldi veeruks
gapminder_separate <- gapminder_unite %>%
  separate(Kontinent_Aasta, c('Kontinent', 'Aasta'), sep = '_')

gapminder_separate



# PUUDUVAD ANDMED


# Kommide andmestiku loomine
kommid <- tibble(
  toode = c('Karakum', 'Drako chewy', 'Mesikäpp batoonike', 'Tiina', 'Oravake', 'Kaseke', 'Lily', 'Barbarissimaitseline karamell'),
  kategooria = c('Pralineekommid', 'Kummi- ja närimiskommid', 'Batoonikesed', 'Marmelaadikommid',  'Pralineekommid', 'Batoonikesed', NA, 'Karamellid'),
  myydud_yhikud = c(NA, 64, 43, 93, 56, NA, 26, 82),
  kaal_grammides = c(175, 110, NA, 175, NA, 150, NA, 120)
)

kommid

# Veeru keskmine väärtus
mean(kommid$kaal_grammides)

# Veeru keskmine väärtus, puuduvaid andmeid ei arvesta
mean(kommid$kaal_grammides, na.rm = TRUE)


# Millistes veergudes esineb puuduvaid andmed?
kommid %>%
  mutate_if(is.character, as.factor) %>% # muuda sõned faktoriteks
  summary()

# Millistes ridades on kategooria veerus andmeid puudu?
kommid %>%
  filter(is.na(kategooria))


## Puuduvate andmete eemaldamine

# Eemalda andmestikust kõik puuduvate andmetega read
kommid %>%
  drop_na()

# Eemalda andmestikust kõik read, kus kategooria on puudu
kommid %>%
  filter(!is.na(kategooria)) 


## Puuduvate andmete asendamine


### Asendamine kindla väärtusega

# Asenda veeru kõik puuduvad väärtused uue väärtusega
kommid1 <- kommid %>%
  mutate(kategooria = replace_na(kategooria, 'Marmelaadikommid'))

# Asenda veeru kõik puuduvad andmed nullidega
kommid2 <- kommid1 %>%
  mutate(myydud_yhikud = replace_na(myydud_yhikud, 0))


### Andmete tuletamine

# Asenda veeru puuduvad väärtused veeru keskmise väärtusega
kommid2 %>%
  #group_by(kategooria) %>% # iga grupi kohta
  mutate(kaal_grammides1 = replace_na(kaal_grammides, mean(kaal_grammides, na.rm = TRUE)))

# Asenda puuduvad andmed eelmise teadaolevaga
kommid2 %>%
  select(toode, kategooria, kaal_grammides) %>%
  mutate(kaal_grammides_uus1 = kaal_grammides, # kopeerimine kaalu veergu 2x
         kaal_grammides_uus2 = kaal_grammides) %>%
  #group_by(kategooria) %>% # kategooriate kaupa
  fill(kaal_grammides_uus1, .direction = 'down') %>% # asenda eelmise teadaolevaga
  fill(kaal_grammides_uus2, .direction = 'up') # asenda järgmise teadaolevaga

kommid3 <- kommid2 %>%
  mutate(kaal_grammides1 = case_when(
    kategooria %in% c('Marmelaadikommid', 'Pralineekommid') ~ 175, # tingimus 1
    kategooria == 'Batoonikesed' ~ 150, # tingimus 2
    TRUE ~ kaal_grammides) # kõik muud juhud
  ) 



# ANDMESTIKU KUJU MUUTMINE

table1 # lai
table2 # pikk
table3 # ??
table4a
table4b

# laiaks
table2

table2 %>%
  pivot_wider(names_from = 'type', values_from = 'count')

# pikaks
table1

table1 %>%
  pivot_longer(c('cases', 'population'), names_to = 'type', values_to = 'count')
   

# Ülesanne: Kuidas viia table4a ja table4b pikale kujule?
     
# table4a
table4a
   
table4a_tidy <- table4a %>%
  pivot_longer(c('1999', '2000'), names_to = 'year', values_to = 'cases')

table4a_tidy

# table4b
table4b
   
table4b_tidy <- table4b %>%
  pivot_longer(c('1999', '2000'), names_to = 'year', values_to = 'population')
   
table4b_tidy



# DPLYR EDASIJÕUDNUTELE
   

## Andmestike kombineerimine
  
# Loome näidisandmestikud: kontoritooted, pagaritooted & hinnad
kontoritooted <- tibble(Tootekood = c(5, 10, 15, 20), 
                        Toote_nimi = c('Kaustik', 'Pastakas', 'Kalkulaator', 'Marker'),
                        Suurus = c('Suur', 'Väike', 'Keskmine', 'Mega')) 
   
pagaritooted <- tibble(Tootekood = c(25, 30, 35, 40), 
                       Toote_nimi = c('Vormileib', 'Sai', 'Sepik', 'Seemneleib'), 
                       Suurus = c('Mega', 'Väike', 'Keskmine', 'Suur')) 
   
hinnad <- tibble(Tootekood = c(10, 15, 20, 25), 
                 Hind = c(3, 2, 10, 5), 
                 Valuuta = c('euro', 'euro', 'euro', 'euro'))

kontoritooted 
pagaritooted 
hinnad

   
### Bind meetodid
   
# Kaks tabelit horisontaalselt kokku 
bind_rows(kontoritooted, pagaritooted) 

# Kaks tabelit vertikaalselt kokku 
bind_cols(kontoritooted, hinnad)

   
### Join meetodid
     
# left_join() 
kõik_tooted <- left_join(kontoritooted, hinnad, by = 'Tootekood') 
kõik_tooted

# right_join() 
right_join(kontoritooted, hinnad, by = 'Tootekood') 

# inner_join() 
inner_join(kontoritooted, hinnad, by = 'Tootekood') 

# full_join() 
full_join(kontoritooted, hinnad, by = 'Tootekood')


# Ülesanne: Kuidas ühendada omavahel andmestikud table4a_tidy ja table4b_tidy?
left_join(table4a_tidy, table4b_tidy, by = c('country', 'year'))
 
   
## Vektoriseeritud funktsioonid
   

### Eelnev ja järgnev väärtus
   
# Argentina rahvaarv eelmisel vaatlusaastal
gapminder_ee %>%
  filter(Riik == 'Argentina') %>%
  select(Riik, Aasta, Rahvaarv) %>%
  mutate(Rahvaarv_eelneval_aastal = lag(Rahvaarv, 1),
         Rahvaarv_järgneval_aastal = lead(Rahvaarv, 1),
         Muutus_protsentides = (Rahvaarv - lag(Rahvaarv, 1)) / lag(Rahvaarv, 1) * 100)


### Kumulatiivsed väärtused
   
# Kanada kumulatiivne min, max ja keskmine oodatav eluiga
gapminder_ee %>%
  filter(Riik == 'Canada') %>%
  mutate(Kum_madalaim_eluiga = cummin(Oodatav_eluiga),
         Kum_kõrgeim_eluiga = cummax(Oodatav_eluiga),
         Kum_keskmine_eluiga = cummean(Oodatav_eluiga)) 


### Nummerdamine
   
# Rea numbrite lisamine
gapminder_ee %>%
  mutate(Rea_nr = row_number())

# Reastamine mingi väärtuse alusel, vaikimisi tõusvas järjekorras
# Miinus ette = langevas järjekorras
gapminder_ee %>%
  filter(Aasta == 2002) %>%
  mutate(Rank = dense_rank(-Rahvaarv)) %>% 
  arrange(Rank) 

   
### Kvantiilid ja protsentiilid
   
# Väärtused jagatakse kvantiilidesse: nt 10 (detsiilid), 4 (kvartiilid)
gapminder_ee %>%
  select(Aasta, Riik, SKP) %>%
  filter(Aasta == 2007) %>%
  mutate(Detsiil = ntile(SKP, 10)) %>%
  arrange(Riik)

# SKP on kõrgem/madalam kui mingi % kõikidest teistest riikidest
gapminder_ee %>%
  select(Aasta, Riik, SKP) %>%
  filter(Aasta == 2007) %>%
  mutate(Protsentiil = percent_rank(SKP)) %>%
  arrange(-Protsentiil)



## Summaarsed funktsioonid
   

### Vaatluste loendamine

# Vaatluste ja riikide arv andmestikus

gapminder_ee %>%
  summarize(Vaatluste_arv = n(),
            Riikide_arv = n_distinct(Riik))


### Kokkuvõtlik statistika

# Saksamaa kokkuvõtlik statistika
gapminder_ee %>%
  filter(Riik == 'Germany') %>%
  summarize(SKP_kogusumma = sum(SKP),
            Oodatav_eluiga_keskm = mean(Oodatav_eluiga),
            Oodatav_eluiga_med = median(Oodatav_eluiga),
            Rahvaarv_min = min(Rahvaarv),
            Rahvaarv_max = max(Rahvaarv))


### Väärtused positsiooni järgi
   
# Kõige kõrgema ja madalama rahvaarvuga riik 2007. aastal
gapminder_ee %>%
    filter(Aasta == 2007) %>%
    arrange(-Rahvaarv) %>% # langevas järjekorras
    summarize(Kõrgeim_rahvaarv = first(Riik),
              Madalaim_rahvaarv = last(Riik))

# Millised riigid on mitmendal kohal oodatava eluea järgi
gapminder_ee %>%
  filter(Aasta == 2007,
         Kontinent == 'Europe') %>%
  arrange(-Oodatav_eluiga) %>%
  summarize(Esimene = nth(Riik, 1),
            Kolmas = nth(Riik, 3),
            Viies = nth(Riik, 5),
            Kümnes = nth(Riik, 10))
   



# TEKSTILISTE ANDMETE TÖÖTLEMINE
   
# Andmestiku 10 esimest riiki
riigid <- gapminder_ee %>%
  select(Riik, Kontinent) %>% 
  filter(Kontinent == 'Europe') %>%
  distinct() %>%
  head(10)
   

## Suur- ja väiketähed
   
# Kõik väiketähed
riigid %>%
  mutate(Riik1 = str_to_lower(Riik))

# Kõik suured tähed
riigid %>%
  mutate(Riik1 = str_to_upper(Riik))

# Iga sõna suure algustähega
riigid %>%
  mutate(Riik1 = str_to_title(Riik))


## Filtreerimine ja asendamine mustri järgi
   
# Asenda veerus kokkulangevad mustrid: "e" -> "E"
   
# Milline on nende kahe funktsiooni erinevus?
riigid %>%
  mutate(Riik1 = str_replace(Riik, 'e', 'E'),
         Riik2 = str_replace_all(Riik, 'e', 'E'))

# Leia gapminder_ee andmestikust kõik riigid, mille nimes sisaldub "land"
gapminder_ee %>%
  select(Riik) %>%
  distinct() %>%
  filter(str_detect(Riik, 'land')) 


# KUUPÄEVADE TÖÖTLEMINE

# Lae lubridate töölauale
library(lubridate)

# Praegune kuupäev ja kellaaeg
today()
now()

class('20180308')
class('2021/03/june')
class('Sept 20, 2021')

# R tunneb kuupäevad ära:
ymd(20180308)
ydm('2021/03/june')
mdy('Sept 20, 2021')

# Loome vektorid
kuupäev <- c("24.02.1918", "24.10.1870", "17.02.2006", "23.04.1343", "02.02.1920", "14.09.1524", "20.08.1991", "25.06.1775") 
sündmus <- c("Iseseisvumine", "Esimese raudteeliini avamine", "KUMU avamine", "Jüriöö ülestõus", "Tartu rahu", "Tallinna kirikute rüüstamine", "Taasiseseisvumine", "Tartu suurpõleng") 

ee_sündmused <- tibble(kuupäev, sündmus) # loome vektoritest tibble andmeraami
ee_sündmused

ee_sündmused1 <- ee_sündmused %>%
  mutate(uus_kuupäev = dmy(kuupäev)) # viime veeru standarsele kuupäeva kujule


## Komponentide eraldamine

ee_sündmused1 %>%
  mutate(aasta = year(uus_kuupäev))

ee_sündmused1 %>%
  mutate(kuu = month(uus_kuupäev, label = TRUE, abbr = FALSE))

ee_sündmused1 %>%
  mutate(kvartal = quarter(uus_kuupäev))

ee_sündmused1 %>%
  mutate(nädal = week(uus_kuupäev),
         iso_nädal = isoweek(uus_kuupäev))

ee_sündmused1 %>%
  mutate(nädalapäev = wday(uus_kuupäev, label = TRUE, abbr = FALSE))

now()

# Eraldame kuupäev-kellaajast kuupäeva komponendi
date(now())

hour(now())

minute(now())

## Kuupäevade ümardamine

# Ümarda nädala esimese päevani
round_date(today(), 'week', week_start = 1)

# Ümarda lähima eelneva esmaspäevani - nädala esimene päev
floor_date(today(), 'week', week_start = 1)

floor_date(now(), 'hour')

# Ümarda lähima järgneva esmaspäevani
ceiling_date(today(), 'week', week_start = 1)

ceiling_date(today(), 'month')

## Kahe kuupäeva vahelise aja arvutamine

library(readxl)
tellimused <- read_excel("tellimused.xlsx")
View(tellimused)

tellimused %>%
  rename(Order_ID = `Order ID`,
         Tellimuse_kuupäev = `Order Date`,
         Tarne_kuupäev = `Ship Date`) %>%
  select(Order_ID, Tellimuse_kuupäev, Tarne_kuupäev) %>%
  distinct() %>%
  mutate(Tellimuse_kuupäev = date(Tellimuse_kuupäev),
         Tarne_kuupäev = date(Tarne_kuupäev),
         Tarne_aeg_päevades = as.integer(Tarne_kuupäev - Tellimuse_kuupäev),
         Tarne_aeg_nädalates = difftime(Tarne_kuupäev, Tellimuse_kuupäev, units='weeks'))
